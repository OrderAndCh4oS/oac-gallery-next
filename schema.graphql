# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Action {
    createdAt: String!
    id: String!
    issuer: User
    metadata: JSONObject
    objkt: Objkt
    target: User
    token: GenerativeToken
    type: TokenActionType!
}

type GenerativeToken {
    actions(filters: ActionFilter, skip: Int = 0, take: Int = 20): [Action!]!
    author: User!
    balance: Float!
    createdAt: String!
    enabled: Boolean!
    entireCollection: [Objkt!]!
    flag: GenTokFlag!
    id: Float!
    latestActions: [Action!]!
    latestObjkts: [Objkt!]!
    marketStats: MarketStats!
    metadata: JSONObject
    metadataUri: String
    name: String!
    objkts(createdAt: String, filters: ObjktFilter, id: String, iteration: String, offerCreatedAt: String, offerPrice: String, rarity: String, skip: Int = 0, take: Int = 20): [Objkt!]!
    objktsCount: Float!
    offers(createdAt: String, filters: ObjktFilter, id: String, iteration: String, offerCreatedAt: String, offerPrice: String, rarity: String, skip: Int = 0, take: Int = 20): [Objkt!]
    price: Float!
    reports: [Report!]!
    royalties: Float!
    slug: String
    supply: Float!
    tags: [String!]
    updatedAt: String!
}

type MarketStats {
    floor: Float
    highestSold: Float
    lowestSold: Float
    median: Float
    primTotal: Float
    secVolumeNb: Float
    secVolumeNb24: Float
    secVolumeTz: Float
    secVolumeTz24: Float
    totalListing: Float
    updatedAt: String!
}

type Objkt {
    actions: [Action!]!
    assigned: Boolean
    assignedAt: String
    createdAt: String!
    duplicate: Boolean
    features: [JSONObject!]
    generationHash: String
    id: Float!
    issuer: GenerativeToken!
    iteration: Float
    metadata: JSONObject
    metadataUri: String
    name: String
    offer: Offer
    owner: User
    rarity: Float
    royalties: Float!
    slug: String
    tags: [String!]
    updatedAt: String!
}

type Offer {
    createdAt: String!
    id: Float!
    issuer: User
    objkt: Objkt
    price: Float!
    royalties: Float!
    updatedAt: String!
}

type Query {
    actions(filters: ActionFilter, skip: Int = 0, take: Int = 20): [Action!]!
    generativeToken(id: Float, slug: String): GenerativeToken
    generativeTokens(skip: Int = 0, take: Int = 20): [GenerativeToken!]!
    generativeTokensByIds(ids: [Float!]!): [GenerativeToken!]
    objkt(hash: String, id: Float, slug: String): Objkt
    objkts(filters: ObjktFilter, skip: Int = 0, take: Int = 20): [Objkt!]!
    offers(createdAt: String, price: String, skip: Int = 0, take: Int = 20): [Offer!]!
    offersByIds(createdAt: String, ids: [Float!]!, price: String): [Offer!]
    randomGenerativeToken: GenerativeToken
    reportedGenerativeTokens(skip: Int = 0, take: Int = 20): [GenerativeToken!]!
    user(id: String, name: String): User
    users(skip: Int = 0, take: Int = 20): [User!]!
}

type Report {
    createdAt: String!
    id: String!
}

type User {
    actions(skip: Int = 0, take: Int = 20): [Action!]!
    actionsAsIssuer: [Action!]!
    actionsAsTarget: [Action!]!
    avatarUri: String
    createdAt: String!
    description: String
    flag: UserFlag!
    generativeTokens(skip: Int = 0, take: Int = 20): [GenerativeToken!]!
    id: String!
    metadata: JSONObject
    metadataUri: String
    name: String
    objkts(createdAt: String, filters: ObjktFilter, id: String, iteration: String, offerCreatedAt: String, offerPrice: String, rarity: String, skip: Int = 0, take: Int = 20): [Objkt!]!
    offers(skip: Int = 0, take: Int = 20): [Offer!]!
    role: UserRole!
    updatedAt: String!
}

enum BaseOperator {
    AND
    OR
}

"Flag state of Generative Token"
enum GenTokFlag {
    AUTO_DETECT_COPY
    CLEAN
    HIDDEN
    MALICIOUS
    NONE
    REPORTED
}

"The type of the action"
enum TokenActionType {
    COMPLETED
    MINTED
    MINTED_FROM
    NONE
    OFFER
    OFFER_ACCEPTED
    OFFER_CANCELLED
    TRANSFERED
    UPDATE_STATE
}

"Flag of the user"
enum UserFlag {
    MALICIOUS
    NONE
    REVIEW
    SUSPICIOUS
}

"Role of the user"
enum UserRole {
    ADMIN
    MODERATOR
    USER
}

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject

input ActionCondition {
    operator: BaseOperator
    type_eq: String
    type_in: [String!]
}

input ActionFilter {
    conditions: [ActionCondition!]
    operator: BaseOperator
    type_eq: String
    type_in: [String!]
}

input ObjktCondition {
    assignedAt_gt: String
    assignedAt_lt: String
    assigned_eq: String
    createdAt_gt: String
    createdAt_lt: String
    offer_ne: String
    operator: BaseOperator
}

input ObjktFilter {
    assignedAt_gt: String
    assignedAt_lt: String
    assigned_eq: String
    conditions: [ObjktCondition!]
    createdAt_gt: String
    createdAt_lt: String
    offer_ne: String
    operator: BaseOperator
}
